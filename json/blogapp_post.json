[
  {
    "model": "blogapp.post",
    "pk": 1,
    "fields": {
      "user": 1,
      "title": "Что такое API. Форматы обмена данными",
      "text": "API (от англ. Application Programming Interface, «программный интерфейс приложения») — это интерфейс для обмена данными. Слово «программный» означает, что API служат в первую очередь для взаимодействия программ: с системой взаимодействует не разработчик, а код, написанный им."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 2,
    "fields": {
      "user": 2,
      "title": "Протокол SOAP: данные в конверте",
      "text": "SOAP (англ. Simple Object Access Protocol, «протокол доступа к простым объектам») — это протокол, который применяется для удаленного вызова процедур, обмена произвольными сообщениями в формате XML и для организации API-сервисов. Протокол SOAP был разработан для Microsoft, первый релиз появился в 1998 году."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 3,
    "fields": {
      "user": 2,
      "title": "Следует отметить",
      "text": "Следует отметить, что повышение уровня гражданского сознания однозначно фиксирует необходимость экспериментов, поражающих по своей масштабности и грандиозности. Задача организации, в особенности же экономическая повестка сегодняшнего дня не даёт нам иного выбора, кроме определения системы обучения кадров, соответствующей насущным потребностям. Мы вынуждены отталкиваться от того, что экономическая повестка сегодняшнего дня позволяет оценить значение стандартных подходов."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 4,
    "fields": {
      "user": 1,
      "title": "REST",
      "text": "REpresentational State Transfer, REST (англ. «передача состояния представления») — это набор принципов, которых следует придерживаться при создании API. Если API сделан по этим принципам, его называют RESTful API (или просто REST API)."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 5,
    "fields": {
      "user": 2,
      "title": "REST: ресурсы, эндпоинты и HTTP-методы",
      "text": "Ключевая абстракция в REST это ресурс. Любая информация, которая может быть названа, может быть ресурсом: пост в социальной сети, коллекция постов, подборка актуальных новостей, пользователь сайта, коллекция любых объектов или других ресурсов."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 6,
    "fields": {
      "user": 2,
      "title": "Метод get(): отправляем запросы из кода",
      "text": "Метод get() модуля requests отправляет GET-запрос к указанному адресу и возвращает объект класса Response. Этот объект включает в себя полную информацию об ответе сервера; получить доступ к этим данным можно через свойства и методы класса Response. Например, содержимое ответа можно получить из свойства response.text."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 7,
    "fields": {
      "user": 1,
      "title": "Механизмы авторизации, протокол OAuth 2.0",
      "text": "Это схема авторизации, предоставляющая третьей стороне (другому пользователю или приложению) ограниченный доступ к ресурсам сервиса от вашего имени, без необходимости передавать логин и пароль. Это становится возможным благодаря OAuth-токену."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 8,
    "fields": {
      "user": 2,
      "title": "API в Telegram",
      "text": "Client API Telegram позволяет разработчику управлять аккаунтом в Telegram через собственные программные клиенты: можно написать программу, которая через Client API будет отправлять и получать сообщения от имени пользователя, подписываться на каналы — выполнять все те действия, которые пользователь выполняет через обычное приложение."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 9,
    "fields": {
      "user": 2,
      "title": "Django REST Framework",
      "text": "Django REST Framework (DRF) предоставляет разработчику весь необходимый набор инструментов для создания REST-сервисов на основе Django. По сути, DRF — это коллекция предустановленных классов. DRF даёт инструменты для решения штатных задач, возникающих при создании REST API."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 10,
    "fields": {
      "user": 1,
      "title": "REST API: Проектирование",
      "text": "Проектирование API — важная часть разработки и хорошая инвестиция в успешный результат. Соблюдение принципов проектирования поможет сделать API современным и удобным в работе. Начнём с принципов консистентности и расширяемости."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 11,
    "fields": {
      "user": 2,
      "title": "Консистентность",
      "text": "Консистентность — это согласованность данных друг с другом, их целостность и внутренняя непротиворечивость. Например, данные о каком-то объекте, полученные с одного эндпоинта, не должны отличаться от данных о том же объекте, но полученных с другого эндпойнта."
    }
  },
  {
    "model": "blogapp.post",
    "pk": 12,
    "fields": {
      "user": 2,
      "title": "Согласованность",
      "text": "Понятие консистентности включает в себя и идею согласованности: добавление в API новой функциональности не должно сломать API."
    }
  }
]